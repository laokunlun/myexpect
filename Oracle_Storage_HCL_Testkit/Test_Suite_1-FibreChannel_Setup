#!/usr/bin/expect

##
##    The Oracle Storage HCL Testkit is a suite of tests for certifying
##    storage with Oracle VM (OVM).
##    Copyright (C) 2013 Oracle USA, Inc 
##
##    This file is part of the Oracle Storage HCL Testkit.
##
##    The Oracle Storage HCL Testkit is free software; you can redistribute 
##    it and/or modify it under the terms of the GNU General Public License 
##    as published by the Free Software Foundation; either version 2 of the 
##    License, or (at your option) any later version.
##
##    The Oracle Storage HCL Testkit is distributed in the hope that it will
##    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
##    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with the Oracle Storage HCL Testkit.  If not; write to the 
##    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
##    Boston, MA 02110-1301 USA. Or see <http://www.gnu.org/licenses/>.
##

source commonExpectDef.cli

################ global variables #####################
set prompt "OVM> "
set VERBOSE [lindex $argv 2]
set send_human {.1 .3 1 .05 2}

set successMsg "Status: Success"
set failureMsg "Status: Failure"
set timeout 900

set myRepo ""
set myPoolFS ""
set repoDiskName ""
set poolfsDiskName ""
set sharedSpare ""
set spareDiskName ""

########## externally defined variables ############
set ovmUser ${ovmUser}
set adminServer ${adminServer}
set ovmPassword [lindex $argv 0]
set ovmAgentUsername ${ovmAgentUsername}
set ovmAgentPassword [lindex $argv 1]
set ovmServerMasterIP ${ovmServerMasterIP}
set ovmServerSlaveIP ${ovmServerSlaveIP}


## Pool Parameters
set serverPoolName fc_testpool1
set serverPoolIP ${serverPoolIP}

## Repository Parameters
set repoName repo_fc1.1
set vdiskName vdisk_fc1.1

## VM Parameters
set vmName VM_fc1.1

## Network
set VM_Network ${VM_Network}
set VM_Netmask ${VM_Netmask}
set VM_NetworkPort ${VM_NetworkPort}
set ovmServerMaster_vmnetworkIP ${ovmServerMaster_vmnetworkIP} 
set ovmServerSlave_vmnetworkIP ${ovmServerSlave_vmnetworkIP} 
set vNIC 00:21:f6:ca:fe:ba
set vNIC1 00:21:f6:ca:fe:b2
set vNIC2 00:21:f6:ca:fe:b1
set vNIC3 00:21:f6:ca:fe:c3

## Storage
set defaultSAN_Server "Unmanaged FibreChannel Storage Array"
set storageNetworkPort "generic"


## Logging
set hcllogdir ${hcllogdir}
set logfile $hcllogdir
append logfile "FibreChannel_TestSuite1-Setup.log"
set testStep 0

#################################################################
##
##       Test Suite 1: Fibre Channel with Generic Plugin
##
#################################################################

log_user 0
OVMlogin
log_file -a $logfile

send_user "\n---------------------------------------------------------------------------------\n"
send_user "GSFC-101: Discover OVM Servers"
send_user "\n---------------------------------------------------------------------------------\n"


send_user "\n## [incr testStep 1].  Discovering the Master Server\n"
send "discoverServer ipAddress=$ovmServerMasterIP port=8899 username=oracle password=$ovmAgentPassword takeOwnership=yes\r"
validateCommandOutput "discoverServer command"

send_user "\n## [incr testStep 1].  Discovering the Secondary Server\n"
send "discoverServer ipAddress=$ovmServerSlaveIP port=8899 username=oracle password=$ovmAgentPassword takeOwnership=yes\r"
validateCommandOutput "discoverServer command"

send_user "\nReading server info...\n"
set slist [getServerIDs]
array set myServerInfo [verifyServers $ovmServerMasterIP $ovmServerSlaveIP $storageNetworkPort $VM_NetworkPort $slist]

if {[info exists myServerInfo($ovmServerMasterIP,name)]} {
    set masterName $myServerInfo($ovmServerMasterIP,name)
} else {
    send_user "The server $ovmServerMasterIP cannot be found!\n"
    send_user "Exiting...\n"
    finishRun 4
}
if {[info exists myServerInfo($ovmServerSlaveIP,name)]} {
    set secondaryName $myServerInfo($ovmServerSlaveIP,name)
} else {
    send_user "The server $ovmServerSlaveIP cannot be found!\n"
    send_user "Exiting...\n"
    finishRun 4
}

if {[info exists myServerInfo($ovmServerMasterIP,vm_port)]} {
    set masterVMPort $myServerInfo($ovmServerMasterIP,vm_port)
} else {
    send_user "Could not find the VM Network Port $VM_NetworkPort on $masterName!\n"
    send_user "Exiting...\n"
    finishRun 4
}

if {[info exists myServerInfo($ovmServerSlaveIP,vm_port)]} {
    set secondaryVMPort $myServerInfo($ovmServerSlaveIP,vm_port)
} else {
    send_user "Could not find the VM Network Port $VM_NetworkPort on $secondaryName!\n"
    send_user "Exiting...\n"
    finishRun 4
}

 
set masterID $myServerInfo($ovmServerMasterIP,id)
set secondaryID $myServerInfo($ovmServerSlaveIP,id)

array set NetworkInfo {}
set NetworkInfo(master,name) $masterName
set NetworkInfo(master,id) $masterVMPort
set NetworkInfo(master,ip) $ovmServerMaster_vmnetworkIP
set NetworkInfo(slave,name) $secondaryName
set NetworkInfo(slave,id) $secondaryVMPort
set NetworkInfo(slave,ip) $ovmServerSlave_vmnetworkIP

send_user "\n## [incr testStep 1]. Attempting to create the network $VM_Network for use with VMs\n"
createNetwork $VM_Network "VIRTUAL_MACHINE"

send_user "\nAttempting to add ports to the Storage Network...\n"
addPorts $VM_Netmask $VM_Network [array get NetworkInfo]


send_user "\n## [incr testStep 1]. Attempting to create vNIC: $vNIC on $VM_Network\n"
createVNIC $vNIC $VM_Network

send_user "\n## [incr testStep 1]. Attempting to create vNIC: $vNIC1 on $VM_Network\n"
createVNIC $vNIC1 $VM_Network

send_user "\n## [incr testStep 1]. Attempting to create vNIC: $vNIC2 on $VM_Network\n"
createVNIC $vNIC2 $VM_Network

send_user "\n## [incr testStep 1]. Attempting to create vNIC: $vNIC3 on $VM_Network\n"
createVNIC $vNIC3 $VM_Network


### With the generic plugin, the FC disks show up as soon as
### the servers are discovered.  The FC disks show up as belonging
### to an "Unmanaged FibreChannel Storage Array". So, instead of
### discovering the SAN server and then adding the servers as
### admin hosts, we skip the discovery step and add the servers
### straight away.
set SAN_ServerName $defaultSAN_Server
set SCSI_Plugin [find_SCSI_Plugins "False" "SCSI"]

send_user "Using the $SCSI_Plugin  plugin, and setting the SAN Server to $SAN_ServerName.\n"

send_user "\nAdding $masterName and $secondaryName as admin servers for $SAN_ServerName.\n"
send_user "\n## [incr testStep 1].   Adding $masterName as admin server for $SAN_ServerName\n"
send "add server id=$masterID to SanServer name='$SAN_ServerName'\r"
validateCommandOutput "add server command"


send_user "\n## [incr testStep 1]. Adding $secondaryName as admin server for $SAN_ServerName\n"
send "add server id=$secondaryID to SanServer name='$SAN_ServerName'\r"
validateCommandOutput "add server command"

send_user "\n## [incr testStep 1]. Refreshing  $SAN_ServerName\n"
send "refresh SanServer name='$SAN_ServerName'\r"
validateCommandOutput "refresh SanServer command"

send_user "\nWaiting 90 seconds for everything to settle....\n"
sleep 90


## verify initial config -- no luns mapped to the servers
array set myNewServerInfo [verifyInitialConfig $ovmServerMasterIP $ovmServerSlaveIP [array get myServerInfo]]
set masterlocals $myNewServerInfo($ovmServerMasterIP,haslocal)
set secondlocals $myNewServerInfo($ovmServerSlaveIP,haslocal)

set masterTotal $masterlocals
set secondTotal $secondlocals


if {$myNewServerInfo($ovmServerMasterIP,verified) == "False" || $myNewServerInfo($ovmServerSlaveIP,verified) == "False"} {
    send_user "\n\nUnexpected initial state: Found LUNs mapped to servers!\n"
    send_user "Please unmap all LUNs and reboot the OVS servers.  After\n"
    send_user "the servers come back up, run the cleanup scripts by setting\n"
    send_user "the -k option.  Once the cleanup run has completed successfully,\n"
    send_user "start the test suite again.\n"
    finishRun 2
}

finishRun 0
