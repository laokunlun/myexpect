#!/usr/bin/expect

##
##    The Oracle Storage HCL Testkit is a suite of tests for certifying
##    storage with Oracle VM (OVM).
##    Copyright (C) 2013 Oracle USA, Inc 
##
##    This file is part of the Oracle Storage HCL Testkit.
##
##    The Oracle Storage HCL Testkit is free software; you can redistribute 
##    it and/or modify it under the terms of the GNU General Public License 
##    as published by the Free Software Foundation; either version 2 of the 
##    License, or (at your option) any later version.
##
##    The Oracle Storage HCL Testkit is distributed in the hope that it will
##    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
##    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with the Oracle Storage HCL Testkit.  If not; write to the 
##    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
##    Boston, MA 02110-1301 USA. Or see <http://www.gnu.org/licenses/>.
##

source commonExpectDef.cli

############### global variables ###################
set prompt "OVM> "
set VERBOSE [lindex $argv 3]
set send_human {.1 .3 1 .05 2}
set successMsg "Status: Success"
set failureMsg "Status: Failure"

set myRepo ""
set myPoolFS ""
set repoDiskName ""
set poolfsDiskName ""
set sharedSpare ""
set spareDiskName ""
#######################################################


########## externally defined variables ############
set ovmUser ${ovmUser}
set adminServer ${adminServer}
set ovmPassword [lindex $argv 0]
set ovmAgentUsername ${ovmAgentUsername}
set ovmAgentPassword [lindex $argv 1]
set ovmServerMasterIP ${ovmServerMasterIP}
set ovmServerSlaveIP ${ovmServerSlaveIP}

## Pool Parameters
set serverPoolName fc_testpool3
set serverPoolIP ${serverPoolIP}

## Repository Parameters
set repoName repo_fc3.1
set vdiskName vdisk_fc3.1

## VM Parameters
set vmName1 VM_fc3.1
set vmName2 VM_fc3.2
set vmName3 VM_fc3.3
set vmName4 VM_fc3.4

## Install Media
set virtualCDROM_URL ${virtualCDROM_URL}
set virtualCDROM_name [getFileName $virtualCDROM_URL]
set vmTemplateURL ${vmTemplateURL}
set vmTemplateName [getFileName $vmTemplateURL]
set vmAssemblyURL ${vmAssemblyURL}
set vmAssemblyName [getFileName $vmAssemblyURL]

## Network
set VM_Network ${VM_Network}
set VM_Netmask ${VM_Netmask}
set VM_NetworkPort ${VM_NetworkPort}
set ovmServerMaster_vmnetworkIP ${ovmServerMaster_vmnetworkIP} 
set ovmServerSlave_vmnetworkIP ${ovmServerSlave_vmnetworkIP} 
set vNIC1 00:21:f6:ca:fe:bb
set vNIC2 00:21:f6:ca:fe:bc
set vNIC3 00:21:f6:ca:fe:bd
set vNIC4 00:21:f6:ca:fe:b9
                                       
## Storage
set SAN_ServerName ${SAN_ServerName}
set SAN_AccessHost ${SAN_AccessHost}
set SAN_AdminHost ${SAN_AdminHost}
set SAN_AdminUsername ${SAN_AdminUsername}
set SAN_AdminPassword [lindex $argv 2]
set SAN_VolumeGroup ${SAN_VolumeGroup}

set storageNetworkIP ${storageNetworkIP}
set storageNetworkNetmask ${storageNetworkNetmask}
set storageNetworkPort ${storageNetworkPort}
set ovmServerMaster_storageIP ${ovmServerMaster_storageIP}
set ovmServerSlave_storageIP ${ovmServerSlave_storageIP}

## For cleanup
set serverPoolList {iscsi_testpool1 fc_testpool1 nfs_testpool2.1 nfs_testpool2.2 iscsi_testpool3 fc_testpool3}
set repoList {repo_fc1.1 repo_iscsi1.1 repo_nfs2.1 repo_nfs2.2 repo_nfs2.3 repo_fc3.1 repo_iscsi3.1}
set vmList {VM_fc1.1 VM_fc1.2 VM_iscsi1.1 VM_iscsi1.2 VM_fc3.1 VM_fc3.2 VM_fc3.3 VM_fc3.4 VM_iscsi3.1 VM_iscsi3.2 VM_iscsi3.3 VM_iscsi3.4 VM_nfs2.1 VM_nfs2.2}

## Logging
set hcllogdir ${hcllogdir}
set logfile $hcllogdir
append logfile "TestSuite2_FibreChannel_Cleanup.log"
set testStep 0

#################################################################
##
##    Test Suite 3: Fibre Channel with Vendor Specific Plugin
##
#################################################################

log_user 0
OVMlogin
log_file -a $logfile

send_user "\nReading server info...\n"
set slist [getServerIDs]
array set myServerInfo [verifyServers $ovmServerMasterIP $ovmServerSlaveIP $storageNetworkPort $VM_NetworkPort $slist]

if {[info exists myServerInfo($ovmServerMasterIP,name)]} {
    set masterName $myServerInfo($ovmServerMasterIP,name)
} else {
    send_user "The server $ovmServerMasterIP cannot be found!\n"
    send_user "Exiting...\n"
    finishRun 2
}
if {[info exists myServerInfo($ovmServerSlaveIP,name)]} {
    set secondaryName $myServerInfo($ovmServerSlaveIP,name)
} else {
    send_user "The server $ovmServerSlaveIP cannot be found!\n"
    send_user "Exiting...\n"
    finishRun 2

}

set masterID $myServerInfo($ovmServerMasterIP,id)
set secondaryID $myServerInfo($ovmServerSlaveIP,id)


send_user "Cleaning up and making sure LUNs and Access Groups can be deleted.\n\n"

send_user "\nDetermining the Name and ID of the LUN clone that was created with $vmName3\n"
set myClonedLUN [findClonedLUN $vmName3 1]


###===> Cleanup.
send_user "\n## [incr testStep 1]. Stopping and deleting VMs.\n\n"
set status [deleteVM $vmList]
switch -- $status \
    "False" {
	finishRun 2
    } "None" {
	send_verbose "\nNo VMs matching those created by the test scripts were found.\nContinuing.\n\n"
    } "True" {
	send_verbose "\nSuccessfully deleted all VMs.  Continuing.\n\n"
    } default {
	send_user "An unexpected error has occurred.\n"
	finishRun 2
    }

sleep 3

send_user "\n## [incr testStep 1]. Deleting the Repositories and all contents.\n"
set status [deleteRepo $repoList]
switch -- $status \
    "False" {
	finishRun 2
    } "None" {
	send_verbose "\nNo repositories matching those created by the test scripts were found.\nContinuing.\n\n"
    } "True" {
	send_verbose "\nSuccessfully deleted all Repositories.\nContinuing.\n\n"
    } default {
	send_user "An unexpected error has occurred.\n"
	finishRun 2
    }

sleep 3

send_user "\n## [incr testStep 1]. Deleting the Server Pools...\n"
set status [deleteServerpool $serverPoolList]
switch -- $status \
    "False" {
	finishRun 2
    } "None" {
	send_verbose "\nNo Server Pools matching those created by the test scripts were found.\nContinuing.\n\n"
    } "True" {
	send_verbose "\nSuccessfully deleted all Server Pools.\nContinuing.\n\n"
    } default {
	send_user "An unexpected error has occurred.\n"
	finishRun 2
    }

sleep 3
###==> Unmap LUNs 
send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun15G from ovmhcl-shared1.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun15G from accessgroup name=ovmhcl-shared1\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun25G from ovmhcl-shared1.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun25G from accessgroup name=ovmhcl-shared1\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun80G from ovmhcl-shared1.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun80G from accessgroup name=ovmhcl-shared1\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\n## [incr testStep 1]. Removing the cloned LUN from ovmhcl-shared1.\n"
send "remove PhysicalDisk id=$myClonedLUN from accessgroup name=ovmhcl-shared1\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\nWaiting 30 seconds for everything to settle....\n\n"
sleep 30
  
###===> Delete LUNs
send_user "\n## [incr testStep 1]. Deleting LUN: ovmhcl-fc-lun15G.\n"
send "delete PhysicalDisk name=ovmhcl-fc-lun15G\r"
validateCommandOutput "delete PhysicalDisk command"

send_user "\n## [incr testStep 1]. Deleting LUN: ovmhcl-fc-lun25G.\n"
send "delete PhysicalDisk name=ovmhcl-fc-lun25G\r"
validateCommandOutput "delete PhysicalDisk command"

send_user "\n## [incr testStep 1]. Deleting LUN: ovmhcl-fc-lun80G\n"
send "delete PhysicalDisk name=ovmhcl-fc-lun80G\r"
validateCommandOutput "delete PhysicalDisk command"

send_user "\n## [incr testStep 1]. Deleting the cloned LUN\n"
send "delete PhysicalDisk id=$myClonedLUN\r"
validateCommandOutput "delete PhysicalDisk command"

send_user "\nWaiting one minute for everything to settle....\n\n"
sleep 60

###==>  Delete Access groups
send_user "\n## [incr testStep 1]. Deleting AccessGroup: ovmhcl-shared1.\n"
send "delete accessGroup name=ovmhcl-shared1\r"
validateCommandOutput "delete AccessGroup command"

send_user "\n\nTest Suite 3: Fibre Channel Vendor Plugin Certification completed successfully.\n";
finishRun 0
