#!/usr/bin/expect

##
##    The Oracle Storage HCL Testkit is a suite of tests for certifying
##    storage with Oracle VM (OVM).
##    Copyright (C) 2013 Oracle USA, Inc 
##
##    This file is part of the Oracle Storage HCL Testkit.
##
##    The Oracle Storage HCL Testkit is free software; you can redistribute 
##    it and/or modify it under the terms of the GNU General Public License 
##    as published by the Free Software Foundation; either version 2 of the 
##    License, or (at your option) any later version.
##
##    The Oracle Storage HCL Testkit is distributed in the hope that it will
##    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
##    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with the Oracle Storage HCL Testkit.  If not; write to the 
##    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
##    Boston, MA 02110-1301 USA. Or see <http://www.gnu.org/licenses/>.
##

source commonExpectDef.cli

################ global variables #####################
set prompt "OVM> "
set VERBOSE [lindex $argv 2]
set send_human {.1 .3 1 .05 2}

set successMsg "Status: Success"
set failureMsg "Status: Failure"
set timeout 900

set myRepo ""
set myPoolFS ""
set repoDiskName ""
set poolfsDiskName ""
set sharedSpare ""
set spareDiskName ""

########## externally defined variables ############
set ovmUser ${ovmUser}
set adminServer ${adminServer}
set ovmPassword [lindex $argv 0]
set ovmAgentUsername ${ovmAgentUsername}
set ovmAgentPassword [lindex $argv 1]
set ovmServerMasterIP ${ovmServerMasterIP}
set ovmServerSlaveIP ${ovmServerSlaveIP}

## Pool Parameters
set serverPoolName iscsi_testpool1
set serverPoolIP ${serverPoolIP}

## Repository Parameters
set repoName repo_iscsi1.1
set vdiskName1 vdisk_iscsi1.1
set vdiskName2 vdisk_iscsi1.2

## VM Parameters
set vmName1 VM_iscsi1.1
set vmName2 VM_iscsi1.2

## Install Media
set virtualCDROM_URL ${virtualCDROM_URL}
set virtualCDROM_name [getFileName $virtualCDROM_URL]
set vmTemplateURL ${vmTemplateURL}
set vmTemplateName [getFileName $vmTemplateURL]
set vmAssemblyURL ${vmAssemblyURL}
set vmAssemblyName [getFileName $vmAssemblyURL]

## Network
set VM_Network ${VM_Network}
set VM_Netmask ${VM_Netmask}
set VM_NetworkPort ${VM_NetworkPort}
set ovmServerMaster_vmnetworkIP ${ovmServerMaster_vmnetworkIP} 
set ovmServerSlave_vmnetworkIP ${ovmServerSlave_vmnetworkIP} 
set vNIC 00:21:f6:ca:fe:bd
set vNIC1 00:21:f6:ca:fe:b3 
set vNIC2 00:21:f6:ca:fe:b4
set vNIC3 00:21:f6:ca:fe:b5
                                                        
## Storage
set defaultSAN_Server "Unmanaged iSCSI Storage Array"
set SAN_ServerName ${SAN_ServerName}
set SAN_AccessHost ${SAN_AccessHost}
set SAN_AccessPort ${SAN_AccessPort}

set storageNetworkIP ${storageNetworkIP}
set storageNetworkPort ${storageNetworkPort}
set storageNetworkNetmask ${storageNetworkNetmask}
set ovmServerMaster_storageIP ${ovmServerMaster_storageIP}
set ovmServerSlave_storageIP ${ovmServerSlave_storageIP}

## Cleanup
set serverPoolList {iscsi_testpool1 fc_testpool1 nfs_testpool2.1 nfs_testpool2.2 iscsi_testpool3 fc_testpool3}
set repoList {repo_fc1.1 repo_iscsi1.1 repo_nfs2.1 repo_nfs2.2 repo_nfs2.3 repo_fc3.1 repo_iscsi3.1}
set vmList {VM_fc1.1 VM_fc1.2 VM_iscsi1.1 VM_iscsi1.2 VM_fc3.1 VM_fc3.2 VM_iscsi3.1 VM_iscsi3.2 VM_nfs2.1 VM_nfs2.2}


## Logging
set hcllogdir ${hcllogdir}
set logfile $hcllogdir
append logfile "iSCSI_TestSuite1-Repo.log"
set testStep 0

############################################################################
##
##       Test Suite 1: iSCSI with Generic Plugin
##
############################################################################
##
##      +-----+-------+---------------+---------------+----------+---------+
##      | LUN | Size  | OVM Server #1 | OVM Server #2 |   CHAP   |  Usage  |
##      +-----+-------+---------------+---------------+----------+---------+
##      |  1  |  7 GB |               |               | Disabled |         |
##      |  2  | 12 GB |               |               | Disabled |         |
##      |  3  |  2 GB |               |               | Disabled |         |
##      |  4  | 15 GB |       X       |       X       | Disabled | PoolFS  |
##      |  5  | 20 GB |       X       |       X       | Disabled |         |
##      |  6  | 30 GB |       X       |       X       | Disabled | Repo    |
##      +-----+-------+---------------+---------------+----------+---------+
##


log_user 0
OVMlogin
log_file -a $logfile

send_user "\nReading server info...\n"
set slist [getServerIDs]
array set myServerInfo [verifyServers $ovmServerMasterIP $ovmServerSlaveIP $storageNetworkPort $VM_NetworkPort $slist]

if {[info exists myServerInfo($ovmServerMasterIP,name)]} {
    set masterName $myServerInfo($ovmServerMasterIP,name)
} else {
    send_user "The server $ovmServerMasterIP cannot be found!\n"
    send_user "Exiting...\n"
    finishRun 4
}
if {[info exists myServerInfo($ovmServerSlaveIP,name)]} {
    set secondaryName $myServerInfo($ovmServerSlaveIP,name)
} else {
    send_user "The server $ovmServerSlaveIP cannot be found!\n"
    send_user "Exiting...\n"
    finishRun 4
}

set masterID $myServerInfo($ovmServerMasterIP,id)
set secondaryID $myServerInfo($ovmServerSlaveIP,id)


send_user "\n----------------------------------------------------------------------------------\n"
send_user "GSIS-306: Clustered Server Pool and Repository Creation"
send_user "\n----------------------------------------------------------------------------------\n"
set testStep 0

discoverStorage "True" "True" $ovmServerMasterIP $ovmServerSlaveIP [array get myServerInfo]
send_user "\nUsing $poolfsDiskName for the Pool Filesystem.\n"
send_user "Using $repoDiskName for the Repository.\n"
send_user "Using $spareDiskName for the VM disk.\n"

send_user "\n## [incr testStep 1].  Creating a clustered ServerPool on $poolfsDiskName\n"
send "create ServerPool virtualIP=$serverPoolIP clusterEnable=yes physicalDisk=$myPoolFS name=$serverPoolName\r"
validateCommandOutput "create serverpool command"

send_user "\n## [incr testStep 1].  Adding $masterName to $serverPoolName\n"
send "add server name=$masterName to serverpool name='$serverPoolName'\r"
validateCommandOutput "add server to serverpool"

send_user "\n## [incr testStep 1].  Adding $secondaryName to $serverPoolName\n"
send "add server name=$secondaryName to serverpool name='$serverPoolName'\r"
validateCommandOutput "add server to serverpool"

send_user "\n## [incr testStep 1].  Creating a clustered repository on $repoDiskName\n"
send  "create repository name='$repoName' serverPool=$serverPoolName physicalDisk=$myRepo\r"
validateCommandOutput "create repository command"

send_user "\n## [incr testStep 1]. Presenting the repository $repoName to $masterName\n"
send  "add server name=$masterName to Repository name='$repoName'\r"
validateCommandOutput "create repository command"

send_user "\n## [incr testStep 1]. Presenting the repository $repoName to $secondaryName\n"
send  "add server name=$secondaryName to Repository name='$repoName'\r"
validateCommandOutput "create repository command"

send_user "\n## [incr testStep 1]. Refreshing the repository $repoName\n" 
send  "refresh Repository name='$repoName'\r"
validateCommandOutput "refresh repository command"


send_user "\n----------------------------------------------------------------------------------\n"
send_user "GSIS-307: Repository and VM Operations"
send_user "\n----------------------------------------------------------------------------------\n"
set testStep 0

send_user "\n## [incr testStep 1]. Importing $virtualCDROM_name.  This will take several minutes...\n"
send  "importVirtualCdrom repository name=$repoName server=$masterName url=$virtualCDROM_URL\r"
validateCommandOutput "import VirtualCdrom to $repoName command"

send_user "\n## [incr testStep 1]. Importing $vmTemplateName.  This will take several minutes...\n"
send  "importTemplate repository name=$repoName server=$masterName url=$vmTemplateURL\r"
validateCommandOutput "import Template to $repoName command"

send_user "\n## [incr testStep 1]. Importing $vmAssemblyName.  This will take several minutes...\n"
send  "importAssembly repository name=$repoName server=$masterName url=$vmAssemblyURL\r"
validateCommandOutput "import Assembly to $repoName command"

send_user "\n## [incr testStep 1]. Creating a template from the Assembly: $vmAssemblyName\n"
send "createTemplatesFromAssembly assembly=$vmAssemblyName\r"
validateCommandOutput "createTemplatesFromAssembly command"

set myNewTemplate [regsub -all -- ".ova" $vmAssemblyName ""]

send_user "\n## [incr testStep 1]. Editing the memory and memoryLimit values for $myNewTemplate\n"
send "edit VM name=$myNewTemplate memory=512 memoryLimit=512\r"
validateCommandOutput "edit $vmTemplateName command"

send_user "\n## [incr testStep 1]. Creating the VM: cloning $vmName2 from the template $myNewTemplate\n"
send "clone VM name=$myNewTemplate destType=Vm destName=$vmName2 serverPool=$serverPoolName\r"
validateCommandOutput "clone VM from template command"

send_user "\n## [incr testStep 1]. Editing the memory and memoryLimit values for $vmTemplateName\n"
send "edit VM name=$vmTemplateName memory=512 memoryLimit=512\r"
validateCommandOutput "edit $vmTemplateName command"

send_user "\n## [incr testStep 1]. Creating the VM: cloning $vmName1 from the template $vmTemplateName\n"
send "clone VM name=$vmTemplateName destType=Vm destName=$vmName1 serverPool=$serverPoolName\r"
validateCommandOutput "clone VM from template command"

send_user "\n## [incr testStep 1]. Creating a virtual disk for use by the VM: $vmName1\n"
send  "create virtualDisk size=10 shareable=no sparse=yes name=$vdiskName1 on repository name=$repoName\r"
validateCommandOutput "create virtualDisk command"

send_user "\n## [incr testStep 1]. Mapping the virtual disk to $vmName2\n"
send  "create vmDiskMapping slot=2 storageDevice=$vdiskName1 name=vdiskMap1 on Vm name=$vmName2\r"
validateCommandOutput "create vmDiskMapping command"

send_user "\n## [incr testStep 1]. Mapping $spareDiskName to $vmName1\n"
send  "create vmDiskMapping slot=2 storageDevice=$sharedSpare name=lunMap1 on Vm name=$vmName1\r"
validateCommandOutput "create vmDiskMapping command"

send_user "\n## [incr testStep 1]. Starting $vmName1\n"
send  "start VM name=$vmName1\r"
validateCommandOutput "start vm command"

send_user "\n## [incr testStep 1]. Starting $vmName2\n"
send  "start VM name=$vmName2\r"
validateCommandOutput "start vm command"

finishRun 0
