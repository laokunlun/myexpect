#!/usr/bin/expect

##
##    The Oracle Storage HCL Testkit is a suite of tests for certifying
##    storage with Oracle VM (OVM).
##    Copyright (C) 2013 Oracle USA, Inc 
##
##    This file is part of the Oracle Storage HCL Testkit.
##
##    The Oracle Storage HCL Testkit is free software; you can redistribute 
##    it and/or modify it under the terms of the GNU General Public License 
##    as published by the Free Software Foundation; either version 2 of the 
##    License, or (at your option) any later version.
##
##    The Oracle Storage HCL Testkit is distributed in the hope that it will
##    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
##    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with the Oracle Storage HCL Testkit.  If not; write to the 
##    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
##    Boston, MA 02110-1301 USA. Or see <http://www.gnu.org/licenses/>.
##

source commonExpectDef.cli

############### global variables ###################
set prompt "OVM> "
set VERBOSE [lindex $argv 3]
set send_human {.1 .3 1 .05 2}
set successMsg "Status: Success"
set failureMsg "Status: Failure"

set myRepo ""
set myPoolFS ""
set repoDiskName ""
set poolfsDiskName ""
set sharedSpare ""
set spareDiskName ""
#######################################################

set testList {VPFC-100 VPFC-101 VPFC-102 VPFC-103 VPFC-104 VPFC-105 VPFC-106 VPFC-201 VPFC-202 VPFC-203 VPFC-204 VPFC-205 VPFC-206 VPFC-207 VPFC-208 VPFC-209 VPFC-210}
array set testStatus {}
set testStatus(VPFC-100,status) "Not Run"
set testStatus(VPFC-101,status) "Not Run"
set testStatus(VPFC-102,status) "Not Run"
set testStatus(VPFC-103,status) "Not Run"
set testStatus(VPFC-104,status) "Not Run"
set testStatus(VPFC-105,status) "Not Run"
set testStatus(VPFC-106,status) "Not Run"
set testStatus(VPFC-201,status) "Not Run"
set testStatus(VPFC-202,status) "Not Run"
set testStatus(VPFC-203,status) "Not Run"
set testStatus(VPFC-204,status) "Not Run"
set testStatus(VPFC-205,status) "Not Run"
set testStatus(VPFC-206,status) "Not Run"
set testStatus(VPFC-207,status) "Not Run"
set testStatus(VPFC-208,status) "Not Run"
set testStatus(VPFC-209,status) "Manual Testcase"
set testStatus(VPFC-210,status) "Manual Testcase"

########## externally defined variables ############
set ovmUser ${ovmUser}
set adminServer ${adminServer}
set ovmPassword [lindex $argv 0]
set ovmAgentUsername ${ovmAgentUsername}
set ovmAgentPassword [lindex $argv 1]
set ovmServerMasterIP ${ovmServerMasterIP}
set ovmServerSlaveIP ${ovmServerSlaveIP}

## Pool Parameters
set serverPoolName fc_testpool3
set serverPoolIP ${serverPoolIP}

## Repository Parameters
set repoName repo_fc3.1
set vdiskName vdisk_fc3.1

## VM Parameters
set vmName1 VM_fc3.1
set vmName2 VM_fc3.2
set vmName3 VM_fc3.3
set vmName4 VM_fc3.4

## Install Media
set virtualCDROM_URL ${virtualCDROM_URL}
set virtualCDROM_name [getFileName $virtualCDROM_URL]
set vmTemplateURL ${vmTemplateURL}
set vmTemplateName [getFileName $vmTemplateURL]
set vmAssemblyURL ${vmAssemblyURL}
set vmAssemblyName [getFileName $vmAssemblyURL]


## Network
set VM_Network ${VM_Network}
set VM_Netmask ${VM_Netmask}
set VM_NetworkPort ${VM_NetworkPort}
set ovmServerMaster_vmnetworkIP ${ovmServerMaster_vmnetworkIP} 
set ovmServerSlave_vmnetworkIP ${ovmServerSlave_vmnetworkIP} 
set vNIC1 00:21:f6:ca:fe:bb
set vNIC2 00:21:f6:ca:fe:bc
set vNIC3 00:21:f6:ca:fe:bd
set vNIC4 00:21:f6:ca:fe:b9
set vNIC5 00:21:f6:ca:fe:c5
                                       
## Storage
set SAN_ServerName ${SAN_ServerName}
set SAN_AccessHost ${SAN_AccessHost}
set SAN_AdminHost ${SAN_AdminHost}
set SAN_AdminUsername ${SAN_AdminUsername}
set SAN_AdminPassword [lindex $argv 2]
set SAN_VolumeGroup ${SAN_VolumeGroup}

set storageNetworkIP ${storageNetworkIP}
set storageNetworkNetmask ${storageNetworkNetmask}
set storageNetworkPort ${storageNetworkPort}
set ovmServerMaster_storageIP ${ovmServerMaster_storageIP}
set ovmServerSlave_storageIP ${ovmServerSlave_storageIP}

## For cleanup
set serverPoolList {iscsi_testpool1 fc_testpool1 nfs_testpool2.1 nfs_testpool2.2 iscsi_testpool3 fc_testpool3}
set repoList {repo_fc1.1 repo_iscsi1.1 repo_nfs2.1 repo_nfs2.2 repo_nfs2.3 repo_fc3.1 repo_iscsi3.1}
set vmList {VM_fc1.1 VM_fc1.2 VM_iscsi1.1 VM_iscsi1.2 VM_fc3.1 VM_fc3.2 VM_fc3.3 VM_fc3.4 VM_iscsi3.1 VM_iscsi3.2 VM_iscsi3.3 VM_iscsi3.4 VM_nfs2.1 VM_nfs2.2}

## Logging
set hcllogdir ${hcllogdir}
set logfile $hcllogdir
append logfile "TestSuite2_FibreChannel_AGandVM.log"
set testStep 0

#################################################################
##
##    Test Suite 3: Fibre Channel with Vendor Specific Plugin
##
#################################################################

log_user 0
OVMlogin
log_file -a $logfile

send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-100: Discover Servers"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-100,status) "Failed"

send_user "\n## [incr testStep 1].  Discovering the Master Server\n"
send "discoverServer ipAddress=$ovmServerMasterIP port=8899 username=$ovmAgentUsername password=$ovmAgentPassword takeOwnership=yes\r"
validateCommandOutput "discoverServer command"


send_user "\n## [incr testStep 1].  Discovering the Secondary Server\n"
send "discoverServer ipAddress=$ovmServerSlaveIP port=8899 username=$ovmAgentUsername password=$ovmAgentPassword takeOwnership=yes\r"
validateCommandOutput "discoverServer command"
set testStatus(VPFC-100,status) "Passed"


send_user "\nReading server info...\n"
set slist [getServerIDs]
array set myServerInfo [verifyServers $ovmServerMasterIP $ovmServerSlaveIP $storageNetworkPort $VM_NetworkPort $slist]

if {[info exists myServerInfo($ovmServerMasterIP,name)]} {
    set masterName $myServerInfo($ovmServerMasterIP,name)
} else {
    send_user "The server $ovmServerMasterIP cannot be found!\n"
    send_user "Exiting...\n"
    finishRun 2
}
if {[info exists myServerInfo($ovmServerSlaveIP,name)]} {
    set secondaryName $myServerInfo($ovmServerSlaveIP,name)
} else {
    send_user "The server $ovmServerSlaveIP cannot be found!\n"
    send_user "Exiting...\n"
    finishRun 2
}

if {[info exists myServerInfo($ovmServerMasterIP,vm_port)]} {
    set masterVMPort $myServerInfo($ovmServerMasterIP,vm_port)
} else {
    send_user "Could not find the VM Network Port $VM_NetworkPort on $masterName!\n"
    send_user "Exiting...\n"
    finishRun 4
}

if {[info exists myServerInfo($ovmServerSlaveIP,vm_port)]} {
    set secondaryVMPort $myServerInfo($ovmServerSlaveIP,vm_port)
} else {
    send_user "Could not find the VM Network Port $VM_NetworkPort on $secondaryName!\n"
    send_user "Exiting...\n"
    finishRun 4
}


set masterID $myServerInfo($ovmServerMasterIP,id)
set secondaryID $myServerInfo($ovmServerSlaveIP,id)

set masterPort $myServerInfo($ovmServerMasterIP,port)
set secondaryPort $myServerInfo($ovmServerSlaveIP,port)

set SCSI_Plugin [find_SCSI_Plugins "True" "SCSI"]

send_user "\n\nUsing the '$SCSI_Plugin' plugin, and attempting to create the storage network on $storageNetworkIP...\n"
createNetwork $storageNetworkIP STORAGE

array set NetworkInfo {}
set NetworkInfo(master,name) $masterName
set NetworkInfo(master,id) $masterPort
set NetworkInfo(master,ip) $ovmServerMaster_storageIP
set NetworkInfo(slave,name) $secondaryName
set NetworkInfo(slave,id) $secondaryPort
set NetworkInfo(slave,ip) $ovmServerSlave_storageIP

send_user "\nAttempting to add ports to the Storage Network...\n"
addPorts $storageNetworkNetmask $storageNetworkIP [array get NetworkInfo]


#set SAN_AdminPassword [promptMe "Enter the Admin User's password for $SAN_ServerName" "True" "False"]
send_user "\n## [incr testStep 1]. Discovering the SAN Server: $SAN_ServerName\n"
send "create sanserver name=$SAN_ServerName plugin='$SCSI_Plugin' storageType=FibreChannelStorageArray adminHost=$SAN_AdminHost adminPassword=$SAN_AdminPassword adminUserName=$SAN_AdminUsername accessHost=$SAN_AccessHost\r"
validateCommandOutput "createSanServer command"

send_user "\nAdding $masterName and $secondaryName as admin servers for $SAN_ServerName.\n"
send_user "\n## [incr testStep 1].   Adding $masterName as admin server for $SAN_ServerName\n"
send "add server id=$masterID to SanServer name='$SAN_ServerName'\r"
validateCommandOutput "add server command"


send_user "\n## [incr testStep 1]. Adding $secondaryName as admin server for $SAN_ServerName\n"
send "add server id=$secondaryID to SanServer name='$SAN_ServerName'\r"
validateCommandOutput "add server command"


send_user "\n## [incr testStep 1]. Refreshing $SAN_ServerName...\n"
send "refresh SanServer name=$SAN_ServerName\r"
validateCommandOutput "refresh SanServer command"

send_user "\n\nWaiting one minute for everything to settle....\n"
sleep 60

send_user "\n## [incr testStep 1]. Rescanning the Physical Disks on $masterName...\n"
send "refreshStorageLayer Server id=$masterID\r"
validateCommandOutput "refreshStorageLayer command for $masterName"


send_user "\n## [incr testStep 1]. Rescanning the Physical Disks on $secondaryName...\n"
send "refreshStorageLayer Server id=$secondaryID\r"
validateCommandOutput "refreshStorageLayer command for $secondaryName"

send_user "\nWaiting one minute for everything to settle...\n"
sleep 60

###==> Create three access groups, 1 for the initiator on server1, 1 for the initiators on server2, and a third for both.
send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-101: Create access groups"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-101,status) "Failed"

send_user "\n## [incr testStep 1]. Creating new Access Group: ovmhcl-fc-ag5 to map LUNs to $masterName\n"
send "create accessgroup name=ovmhcl-fc-ag5 on SanServer name=$SAN_ServerName\r"
validateCommandOutput "create AccessGroup command"
sleep 3
send_user "\nFinding the FC initiators on $masterName\n"
addInitiators fc $masterName ovmhcl-fc-ag5

send_user "\n## [incr testStep 1]. Creating new Access Group: ovmhcl-fc-ag6 to map LUNs to $secondaryName\n"
send "create accessgroup name=ovmhcl-fc-ag6 on SanServer name=$SAN_ServerName\r"
validateCommandOutput "create AccessGroup command"
sleep 3
send_user "\nFinding the FC initiators on $secondaryName\n"
addInitiators fc $secondaryName ovmhcl-fc-ag6
set testStatus(VPFC-101,status) "Passed"

###==> Create three LUNs 2GB,thin; 4GB,not thin; 10GB,thin. 
###==> Map each new LUN to only one of the initiator groups you just made
###==> verify that LUNs are mapped to the right nodes....

send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-102: Create LUNs"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-102,status) "Failed"

send_user "\nCreating and mapping the new LUNs....\n\n"

send_user "\n## [incr testStep 1]. Creating a new 3G LUN: ovmhcl-fc-lun1\n"
send "create physicaldisk name=ovmhcl-fc-lun1 shareable=no size=3 thinProvision=yes on volumeGroup name=$SAN_VolumeGroup\r"
validateCommandOutput "create PhysicalDisk command"

send_user "\n## [incr testStep 1]. Creating a new 6G LUN: ovmhcl-fc-lun2, and mapping to Access Group: ovmhcl-fc-ag6\n"
send "create physicaldisk name=ovmhcl-fc-lun2 shareable=no size=6 thinProvision=no on volumeGroup name=$SAN_VolumeGroup\r"
validateCommandOutput "create PhysicalDisk command"

send_user "\n## [incr testStep 1]. Creating a new 10G LUN: ovmhcl-fc-lun3\n"
send "create physicaldisk name=ovmhcl-fc-lun3 shareable=no size=10 thinProvision=yes on volumeGroup name=$SAN_VolumeGroup\r"
validateCommandOutput "create PhysicalDisk command"
set testStatus(VPFC-102,status) "Passed"


send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-103: Present LUNs to access groups"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-103,status) "Failed"

send_user "\n## [incr testStep 1]. Mapping ovmhcl-fc-lun1 to Access Group: ovmhcl-fc-ag5\n"
send "add physicaldisk name=ovmhcl-fc-lun1 to accessgroup name=ovmhcl-fc-ag5\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

send_user "Waiting 30 seconds for everything to settle....\n"
sleep 30

send_user "\n## [incr testStep 1]. Mapping ovmhcl-fc-lun2 to Access Group: ovmhcl-fc-ag6\n"
send "add physicaldisk name=ovmhcl-fc-lun2 to accessgroup name=ovmhcl-fc-ag6\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

send_user "Waiting 30 seconds for everything to settle....\n"
sleep 30

send_user "\n## [incr testStep 1]. Mapping ovmhcl-fc-lun3 to Access Group: ovmhcl-fc-ag5\n"
send "add physicaldisk name=ovmhcl-fc-lun3 to accessgroup name=ovmhcl-fc-ag5\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

send_user "Waiting 30 seconds for everything to settle....\n"
sleep 30

send_user "\n## [incr testStep 1]. Mapping ovmhcl-fc-lun3 to Access Group: ovmhcl-fc-ag6\n"
send "add physicaldisk name=ovmhcl-fc-lun3 to accessgroup name=ovmhcl-fc-ag6\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

send_user "\nWaiting 90 seconds for everything to settle, then verifying the LUNs have been mapped correctly....\n\n"
sleep 90

if {[verifyDiskMapping ovmhcl-fc-lun1 $masterName] == "False"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun1! The disk should have been available on $masterName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}


if {[verifyDiskMapping ovmhcl-fc-lun2 $secondaryName] == "False"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun2! The disk should have been available on $masterName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

if {[verifyDiskMapping ovmhcl-fc-lun3 $masterName] == "False" || [verifyDiskMapping ovmhcl-fc-lun3 $secondaryName] == "False"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun3! The disk should have been\n"
    send_user "available on $masterName and $secondaryName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}
set testStatus(VPFC-103,status) "Passed"

###==> Unmap all three luns and verify
send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-104: Remove LUNs from access groups"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-104,status) "Failed"

send_user "\nUnmapping the newly created LUNs and verifying they are no longer present on the servers....\n\n"
send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun1 from ovmhcl-fc-ag5.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun1 from accessgroup name=ovmhcl-fc-ag5\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun2 from ovmhcl-fc-ag6.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun2 from accessgroup name=ovmhcl-fc-ag6\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun3 from ovmhcl-fc-ag5 and ovmhcl-fc-ag6.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun3 from accessgroup name=ovmhcl-fc-ag5\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun3 from ovmhcl-fc-ag6.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun3 from accessgroup name=ovmhcl-fc-ag6\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"


send_user "\nWaiting 40 seconds for everything to settle, then verifying the LUNs have been unmapped correctly....\n\n"
sleep 40

if {[verifyDiskMapping ovmhcl-fc-lun1 $masterName] == "True"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun1! The disk should have been removed from $masterName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

sleep 2

if {[verifyDiskMapping ovmhcl-fc-lun2 $secondaryName] == "True"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun2! The disk should have been removed from $secondaryName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

sleep 2

if {[verifyDiskMapping ovmhcl-fc-lun3 $masterName] == "True" || [verifyDiskMapping ovmhcl-fc-lun3 $secondaryName] == "True"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun3! The disk should have been\n"
    send_user "removed from $masterName and $secondaryName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}
set testStatus(VPFC-104,status) "Passed"


###==> map all luns to both servers and verify
send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-105: Present LUNs to both access groups"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-105,status) "Failed"

send_user "\nRemapping all three LUNs to both servers....\n\n"
send_user "\n## [incr testStep 1]. Mapping ovmhcl-fc-lun1 to Access Group: ovmhcl-fc-ag5\n"
send "add physicaldisk name=ovmhcl-fc-lun1 to accessgroup name=ovmhcl-fc-ag5\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

send_user "Waiting 30 seconds for everything to settle....\n"
sleep 30

send_user "\n## [incr testStep 1]. Mapping ovmhcl-fc-lun1 to Access Group: ovmhcl-fc-ag6\n"
send "add physicaldisk name=ovmhcl-fc-lun1 to accessgroup name=ovmhcl-fc-ag6\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

send_user "Waiting 30 seconds for everything to settle....\n"
sleep 30

send_user "\n## [incr testStep 1]. Mapping ovmhcl-fc-lun2 to Access Group: ovmhcl-fc-ag5\n"
send "add physicaldisk name=ovmhcl-fc-lun2 to accessgroup name=ovmhcl-fc-ag5\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

send_user "Waiting 30 seconds for everything to settle....\n"
sleep 30

send_user "\n## [incr testStep 1]. Mapping ovmhcl-fc-lun2 to Access Group: ovmhcl-fc-ag6\n"
send "add physicaldisk name=ovmhcl-fc-lun2 to accessgroup name=ovmhcl-fc-ag6\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

send_user "Waiting 30 seconds for everything to settle....\n"
sleep 30

send_user "\n## [incr testStep 1]. Mapping ovmhcl-fc-lun3 to Access Group: ovmhcl-fc-ag5\n"
send "add physicaldisk name=ovmhcl-fc-lun3 to accessgroup name=ovmhcl-fc-ag5\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

send_user "Waiting 30 seconds for everything to settle....\n"
sleep 30

send_user "\n## [incr testStep 1]. Mapping ovmhcl-fc-lun3 to Access Group: ovmhcl-fc-ag6\n"
send "add physicaldisk name=ovmhcl-fc-lun3 to accessgroup name=ovmhcl-fc-ag6\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

send_user "\nWaiting 90 seconds for everything to settle, then verifying the LUNs have been mapped correctly....\n\n"
sleep 90

if {[verifyDiskMapping ovmhcl-fc-lun1 $masterName] == "False" || [verifyDiskMapping ovmhcl-fc-lun1 $secondaryName] == "False"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun1! The disk should have been\n"
    send_user "available on both $masterName and $secondaryName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

sleep 2

if {[verifyDiskMapping ovmhcl-fc-lun2 $masterName] == "False" || [verifyDiskMapping ovmhcl-fc-lun2 $secondaryName] == "False"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun2! The disk should have been\n"
    send_user "available on both $masterName and $secondaryName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

sleep 2

if {[verifyDiskMapping ovmhcl-fc-lun3 $masterName] == "False" || [verifyDiskMapping ovmhcl-fc-lun3 $secondaryName] == "False"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun3! The disk should have been\n"
    send_user "available on both $masterName and $secondaryName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}
set testStatus(VPFC-105,status) "Passed"


###==> resize luns (shrink) -- should fail
send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-106: Resize LUNs"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-106,status) "Failed"

send_user "\nAttempting to shrink the LUNs; each action should fail....\n\n"
if {[resizeDisks ovmhcl-fc-lun1 2] == "True"} {
    send_user "Shinking the LUN was successful, but this operation is not supported!\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

send_user "Waiting 30 seconds for everything to settle....\n"
sleep 30

if {[resizeDisks ovmhcl-fc-lun2 5] == "True"} {
    send_user "Shrinking the LUN was successful, but this operation is not supported!\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

send_user "Waiting 30 seconds for everything to settle....\n"
sleep 30

if {[resizeDisks ovmhcl-fc-lun3 8] == "True"} {
    send_user "Shrinking the LUN was successful, but this operation is not supported!\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

###==> resize luns (grow) -- should pass
send_user "\nAttempting to grow the LUNs; each action should succeed....\n\n"
if {[resizeDisks ovmhcl-fc-lun1 5] == "False"} {
    send_user "Growing the LUN was unsuccessful, but increasing the LUN size should succeed!\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

send_user "Waiting 30 seconds for everything to settle....\n"
sleep 30

if {[resizeDisks ovmhcl-fc-lun2 10] == "False"} {
    send_user "Growing the LUN was unsuccessful, but increasing the LUN size should succeed!\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

send_user "Waiting 30 seconds for everything to settle....\n"
sleep 30

if {[resizeDisks ovmhcl-fc-lun3 20] == "False"} {
    send_user "Growing the LUN was unsuccessful, but increasing the LUN size should succeed!\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}
set testStatus(VPFC-106,status) "Passed"


send_user "Tearing down the environment in preparation for Part Two....\n"

###==> Unmap LUNs, 
send_user "\nVerifying that it is possible to delete the LUNs and Access Groups....\n\n"
send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun1 from ovmhcl-fc-ag5 and ovmhcl-fc-ag6.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun1 from accessgroup name=ovmhcl-fc-ag5\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun1 from ovmhcl-fc-ag6.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun1 from accessgroup name=ovmhcl-fc-ag6\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun2 from ovmhcl-fc-ag5 and ovmhcl-fc-ag6.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun2 from accessgroup name=ovmhcl-fc-ag5\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun2 from ovmhcl-fc-ag6.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun2 from accessgroup name=ovmhcl-fc-ag6\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun3 from ovmhcl-fc-ag5 and ovmhcl-fc-ag6.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun3 from accessgroup name=ovmhcl-fc-ag5\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\n## [incr testStep 1]. Removing ovmhcl-fc-lun3 from ovmhcl-fc-ag6.\n"
send "remove PhysicalDisk name=ovmhcl-fc-lun3 from accessgroup name=ovmhcl-fc-ag6\r"
validateCommandOutput "remove PhysicalDisk from AccessGroup command"

send_user "\nWaiting 40 seconds for everything to settle....\n\n"
sleep 40

if {[verifyDiskMapping ovmhcl-fc-lun1 $masterName] == "True"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun1! The disk should have been removed from $masterName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
} 
 

if {[verifyDiskMapping ovmhcl-fc-lun2 $secondaryName] == "True"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun2! The disk should have been removed from $secondaryName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

if {[verifyDiskMapping ovmhcl-fc-lun3 $masterName] == "True" || [verifyDiskMapping ovmhcl-fc-lun3 $secondaryName] == "True"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun3! The disk should have been\n"
    send_user "removed from both $masterName and $secondaryName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

send_user "\nWaiting 30 seconds for everything to settle....\n\n"
sleep 30

###==> delete LUNs.
send_user "\n## [incr testStep 1]. Deleting LUN: ovmhcl-fc-lun1.\n"
send "delete PhysicalDisk name=ovmhcl-fc-lun1\r"
validateCommandOutput "delete PhysicalDisk command"

send_user "\n## [incr testStep 1]. Deleting LUN: ovmhcl-fc-lun2.\n"
send "delete PhysicalDisk name=ovmhcl-fc-lun2\r"
validateCommandOutput "delete PhysicalDisk command"

send_user "\n## [incr testStep 1]. Deleting LUN: ovmhcl-fc-lun3.\n"
send "delete PhysicalDisk name=ovmhcl-fc-lun3\r"
validateCommandOutput "delete PhysicalDisk command"

send_user "\nWaiting 60 seconds for everything to settle....\n\n"
sleep 60

###==>  delete access groups.
send_user "\n## [incr testStep 1]. Deleting AccessGroup: ovmhcl-fc-ag5.\n"
send "delete accessGroup name=ovmhcl-fc-ag5\r"
validateCommandOutput "delete AccessGroup command"

sleep 5
send_user "\n## [incr testStep 1]. Deleting AccessGroup: ovmhcl-fc-ag6.\n"
send "delete accessGroup name=ovmhcl-fc-ag6\r"
validateCommandOutput "delete AccessGroup command"


###########################################################
###
###               Part 2: VM Operations
###
###########################################################


##==> Create access group for both nodes.
send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-201: Create a shared access group and three LUNs"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-201,status) "Failed"

send_user "\n## [incr testStep 1]. Creating new Access Group: ovmhcl-shared1 to map LUNs to $masterName and $secondaryName\n"
send "create accessgroup name=ovmhcl-shared1 on SanServer name=$SAN_ServerName\r"
validateCommandOutput "create AccessGroup command"
sleep 3
addInitiators fc $masterName ovmhcl-shared1
sleep 3
addInitiators fc $secondaryName ovmhcl-shared1


##==> create 3 LUNs 15GB,thin; 25GB,Not thin; 80G, thin
send_user "\n## [incr testStep 1]. Creating a new 15G LUN: ovmhcl-fc-lun15G, and mapping to Access Group: ovmhcl-shared1\n"
send "create physicaldisk name=ovmhcl-fc-lun15G shareable=no size=15 thinProvision=yes on volumeGroup name=$SAN_VolumeGroup\r"
validateCommandOutput "create PhysicalDisk command"
send "add physicaldisk name=ovmhcl-fc-lun15G to accessgroup name=ovmhcl-shared1\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

send_user "\n## [incr testStep 1]. Creating a new 25G LUN: ovmhcl-fc-lun25G, and mapping to Access Group: ovmhcl-shared1\n"
send "create physicaldisk name=ovmhcl-fc-lun25G shareable=no size=25 thinProvision=no on volumeGroup name=$SAN_VolumeGroup\r"
validateCommandOutput "create PhysicalDisk command"
send "add physicaldisk name=ovmhcl-fc-lun25G to accessgroup name=ovmhcl-shared1\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

send_user "\n## [incr testStep 1]. Creating a new 80G LUN: ovmhcl-fc-lun80G, and mapping to Access Group: ovmhcl-shared1\n"
send "create physicaldisk name=ovmhcl-fc-lun80G shareable=no size=80 thinProvision=yes on volumeGroup name=$SAN_VolumeGroup\r"
validateCommandOutput "create PhysicalDisk command"
send "add physicaldisk name=ovmhcl-fc-lun80G to accessgroup name=ovmhcl-shared1\r"
validateCommandOutput "add PhysicalDisk to AccessGroup command"

sleep 2
send_user "\nLarger LUNs take slightly longer to be visible to the manager when they've\n"
send_user "just been mapped.  Waiting 2 minutes for everything to settle, then\n"
send_user "verifying the LUNs have been mapped correctly....\n\n"
sleep 120

if {[verifyDiskMapping ovmhcl-fc-lun15G $masterName] == "False" || [verifyDiskMapping ovmhcl-fc-lun15G $secondaryName] == "False"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun15G! The disk should have been\n"
    send_user "available on both $masterName and $secondaryName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}


if {[verifyDiskMapping ovmhcl-fc-lun25G $secondaryName] == "False" || [verifyDiskMapping ovmhcl-fc-lun25G $masterName] == "False"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun25G! The disk should have been\n"
    send_user "available on both $masterName and $secondaryName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}

if {[verifyDiskMapping ovmhcl-fc-lun80G $masterName] == "False" || [verifyDiskMapping ovmhcl-fc-lun80G $secondaryName] == "False"} {
    send_user "Disk mapping failed for ovmhcl-fc-lun80G! The disk should have been\n"
    send_user "available on $masterName and $secondaryName, but was not.\n"
    send_user "Test Status: FAILED\n"
    finishRun 4
}
set testStatus(VPFC-201,status) "Passed"



send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-202: Create a clustered server pool"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-202,status) "Failed"

set myRepo "ovmhcl-fc-lun80G"
set myPoolFS "ovmhcl-fc-lun25G"
set sharedSpare "ovmhcl-fc-lun15G"
set poolfsDiskName "ovmhcl-fc-lun25G"
set repoDiskName "ovmhcl-fc-lun80G"
set spareDiskName "ovmhcl-fc-lun15G"

send_user "\nUsing $poolfsDiskName for the Pool Filesystem.\n"
send_user "Using $repoDiskName for the Repository.\n"
send_user "Using $spareDiskName for a VM disk map.\n"

send_user "\n## [incr testStep 1]. Creating a clustered ServerPool on $myPoolFS\n"
send "create ServerPool virtualIP=$serverPoolIP clusterEnable=yes physicalDisk=$myPoolFS name=$serverPoolName\r"
validateCommandOutput "create serverpool command"


send_user "\n## [incr testStep 1]. Adding $masterName to $serverPoolName\n"
send "add server name=$masterName to serverpool name='$serverPoolName'\r"
validateCommandOutput "add server to serverpool"

send_user "\n## [incr testStep 1]. Adding $secondaryName to $serverPoolName\n"
send "add server name=$secondaryName to serverpool name='$serverPoolName'\r"
validateCommandOutput "add server to serverpool"

send_user "\n## [incr testStep 1]. Creating a clustered repository on $repoDiskName\n"
send "create repository name='$repoName' serverPool=$serverPoolName physicalDisk=$myRepo\r"
validateCommandOutput "create repository command"

send_user "\n## [incr testStep 1]. Presenting the repository $repoName to $masterName\n"
send "add server name=$masterName to Repository name='$repoName'\r"
validateCommandOutput "create repository command"

send_user "\n## [incr testStep 1]. Presenting the repository $repoName to $secondaryName\n"
send "add server name=$secondaryName to Repository name='$repoName'\r"
validateCommandOutput "create repository command"

send_user "\n## [incr testStep 1]. Refreshing the repository $repoName\n" 
send "refresh Repository name='$repoName'\r"
validateCommandOutput "refresh repository command"
set testStatus(VPFC-202,status) "Passed"

array unset NetworkInfo
array set NetworkInfo {}
set NetworkInfo(master,name) $masterName
set NetworkInfo(master,id) $masterVMPort
set NetworkInfo(master,ip) $ovmServerMaster_vmnetworkIP
set NetworkInfo(slave,name) $secondaryName
set NetworkInfo(slave,id) $secondaryVMPort
set NetworkInfo(slave,ip) $ovmServerSlave_vmnetworkIP

send_user "\n## [incr testStep 1]. Attempting to create the network $VM_Network for use with VMs\n"
createNetwork $VM_Network "VIRTUAL_MACHINE"

send_user "\nAttempting to add ports to the Storage Network...\n"
addPorts $VM_Netmask $VM_Network [array get NetworkInfo]

send_user "\n## [incr testStep 1]. Attempting to create vNIC: $vNIC1 on $VM_Network\n"
createVNIC $vNIC1 $VM_Network

send_user "\n## [incr testStep 1]. Attempting to create vNIC: $vNIC2 on $VM_Network\n"
createVNIC $vNIC2 $VM_Network

send_user "\n## [incr testStep 1]. Attempting to create vNIC: $vNIC3 on $VM_Network\n"
createVNIC $vNIC3 $VM_Network

send_user "\n## [incr testStep 1]. Attempting to create vNIC: $vNIC4 on $VM_Network\n"
createVNIC $vNIC4 $VM_Network

send_user "\n## [incr testStep 1]. Attempting to create vNIC: $vNIC5 on $VM_Network\n"
createVNIC $vNIC5 $VM_Network

sleep 3
send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-203: Repository Operations"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-203,status) "Failed"

send_user "\n## [incr testStep 1]. Importing $virtualCDROM_name.  This will take several minutes...\n"
send "importVirtualCdrom repository name=$repoName server=$masterName url=$virtualCDROM_URL\r"
validateCommandOutput "import VirtualCdrom to $repoName command"

send_user "\n## [incr testStep 1]. Importing $vmTemplateName.  This will take several minutes...\n"
send "importTemplate repository name=$repoName server=$masterName url=$vmTemplateURL\r"
validateCommandOutput "import Template to $repoName command"
set testStatus(VPFC-203,status) "Passed"


send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-204: VM Guest Creation"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-204,status) "Failed"

send_user "\n## [incr testStep 1]. Creating the VM: $vmName1\n" 
send "create VM name=$vmName1 repository=$repoName domainType=XEN_HVM memory=512 memoryLimit=512 on Server name=$masterName\r"
validateCommandOutput "create vm command"

send_user "\n## [incr testStep 1]. Mapping the Virtual CDROM to the VM\n"
send "create vmdiskmapping slot=3 storageDevice=$virtualCDROM_name name=isoMap1 on vm name=$vmName1\r"
validateCommandOutput "create vmdiskmapping command"

send_user "\n## [incr testStep 1]. Creating a virtual disk for use by the VM: $vmName1\n"
send "create virtualDisk size=4 shareable=yes sparse=yes name=$vdiskName on repository name=$repoName\r"
validateCommandOutput "create virtualDisk command"

send_user "\n## [incr testStep 1]. Mapping the virtual disk to $vmName1\n"
send "create vmDiskMapping slot=2 storageDevice=$vdiskName name=vdiskMap1 on Vm name=$vmName1\r"
validateCommandOutput "create vmDiskMapping command"

send_user "\n## [incr testStep 1]. Mapping $spareDiskName to $vmName1\n"
send "create vmDiskMapping slot=1 storageDevice=$sharedSpare name=lunMap1 on Vm name=$vmName1\r"
validateCommandOutput "create vmDiskMapping command"

send_user "\n## [incr testStep 1]. Adding the vNIC to the VM: $vmName1\n"
addVnic $vNIC1 $vmName1

send_user "\n## [incr testStep 1]. Setting the boot order for $vmName1 to: CDROM,Disk\n"
send "edit vm name=$vmName1 bootOrder='CDROM,DISK'\r"
validateCommandOutput "edit vm command"

send_user "\n## [incr testStep 1]. Editing the memory and memoryLimit values for $vmTemplateName\n"
send "edit VM name=$vmTemplateName memory=512 memoryLimit=512\r"
validateCommandOutput "edit $vmTemplateName command"

send_user "\n## [incr testStep 1]. Creating the VM: cloning $vmName2 from the template $vmTemplateName\n" 
send "clone VM name=$vmTemplateName destType=Vm destName=$vmName2 serverPool=$serverPoolName\r"
validateCommandOutput "clone VM from template command"

send_user "\n## [incr testStep 1]. Adding the vNIC to the VM: $vmName2\n"
addVnic $vNIC2 $vmName2
set testStatus(VPFC-204,status) "Passed"


##===> migrate VM
send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-205, 206, and 207: Migrate offline and online VMs\n"
send_user "                        Suspend, resume, and stop VMs"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-205,status) "Failed"
set testStatus(VPFC-206,status) "Failed"
set testStatus(VPFC-207,status) "Failed"

set sourceID1 [findSource $vmName1]
set sourceID2 [findSource $vmName2]


if {$sourceID1 == "False" || $sourceID2== "False"} {
    send_user "Test Status: Failed\n"
    finishRun 2
}


if {$sourceID1 == $masterID} {
    set sourceName1 $masterName
    set destID1 $secondaryID
    set destName1 $secondaryName
} else {
    set sourceName1 $secondaryName
    set destID1 $masterID
    set destName1 $masterName
}


if {$sourceID2 == $masterID} {
    set sourceName2 $masterName
    set destID2 $secondaryID
    set destName2 $secondaryName
} else {
    set sourceName2 $secondaryName
    set destID2 $masterID
    set destName2 $masterName
}

send_user "\n## [incr testStep 1]. Migrating $vmName1 from $sourceName1 to $destName1\n"
send "migrate vm name=$vmName1 destServer=$destID1\r"
validateCommandOutput "migrate vm command"


send_user "\n## [incr testStep 1]. Migrating $vmName2 from $sourceName2 to $destName2\n"
send "migrate vm name=$vmName2 destServer=$destID2\r"
validateCommandOutput "migrate vm command"


###===> start VM
send_user "\n## [incr testStep 1]. Starting $vmName1\n"
send "start VM name=$vmName1\r"
validateCommandOutput "start vm command"

send_user "\n## [incr testStep 1]. Starting $vmName2\n"
send "start VM name=$vmName2\r"
validateCommandOutput "start vm command"

send_user "Waiting 90 seconds to let Servers catch up....\n"
sleep 90

###===> suspend VM
send_user "\n## [incr testStep 1]. Suspending $vmName1\n"
send "suspend vm name=$vmName1\r"
validateCommandOutput "suspend vm command"

send_user "\n## [incr testStep 1]. Suspending $vmName2\n"
send "suspend vm name=$vmName2\r"
validateCommandOutput "suspend vm command"

###===> resume vm
send_user "\n## [incr testStep 1]. Resuming $vmName1\n"
send "resume vm name=$vmName1\r"
validateCommandOutput "resume vm command"

send_user "\n## [incr testStep 1]. Resuming $vmName2\n"
send "resume vm name=$vmName2\r"
validateCommandOutput "resume vm command"

###===> migrate vm
send_user "\n## [incr testStep 1]. Migrating $vmName1 from $destName1 to $sourceName1\n"
send "migrate vm name=$vmName1 destServer=$sourceID1\r"
validateCommandOutput "migrate vm command"

send_user "\n## [incr testStep 1]. Migrating $vmName2 from $destName2 to $sourceName2\n"
send "migrate vm name=$vmName2 destServer=$sourceID2\r"
validateCommandOutput "migrate vm command"

###===> stop vm
send_user "\n## [incr testStep 1]. Stopping $vmName1\n"
send "stop vm name=$vmName1\r"
validateCommandOutput "stop vm command"

send_user "\n## [incr testStep 1]. Stopping $vmName2\n"
send "stop vm name=$vmName2\r"
validateCommandOutput "stop vm command"

###===> migrate vm
send_user "\n## [incr testStep 1]. Migrating $vmName1 from $sourceName1 to $destName1\n"
send "migrate vm name=$vmName1 destServer=$destID1\r"
validateCommandOutput "migrate vm command"

send_user "\n## [incr testStep 1]. Migrating $vmName2 from $sourceName2 to $destName2\n"
send "migrate vm name=$vmName2 destServer=$destID2\r"
validateCommandOutput "migrate vm command"

###===> start vm
send_user "\n## [incr testStep 1]. Starting $vmName1\n"
send "start VM name=$vmName1\r"
validateCommandOutput "start vm command"

send_user "\n## [incr testStep 1]. Starting $vmName2\n"
send "start VM name=$vmName2\r"
validateCommandOutput "start vm command"

send_user "Waiting 90 seconds to let Servers catch up....\n"
sleep 90

##===> stop vm
send_user "\n## [incr testStep 1]. Stopping $vmName1\n"
send "stop vm name=$vmName1\r"
validateCommandOutput "stop vm command"

send_user "\n## [incr testStep 1]. Stopping $vmName2\n"
send "stop vm name=$vmName2\r"
validateCommandOutput "stop vm command"
set testStatus(VPFC-205,status) "Passed"
set testStatus(VPFC-206,status) "Passed"
set testStatus(VPFC-207,status) "Passed"


##===> clone vm -- simple
send_user "\n\n--------------------------------------------------------------------------\n"
send_user "VPFC-208: Clone VM using simple clone"
send_user "\n--------------------------------------------------------------------------\n"
set testStatus(VPFC-208,status) "Failed"

send_user "\n## [incr testStep 1]. Cloning $vmName1 to a new VM: $vmName3\n"
send "clone vm name=$vmName1 destType=Vm destName=$vmName3 serverPool=$serverPoolName\r"
validateCommandOutput "clone vm command"

send_user "\nWaiting 90 seconds for Servers to settle....\n"
sleep 90

### We need to know the disk ID of the cloned LUN so that
### it can be deleted later, when we're cleaning up.
### We know that the LUN is the first of all the disk mappings
### so to find the disk id of the newly created lun, we just 
### need to look at vmdiskmapping 1 for this VM...
send_user "\nDetermining the Name and ID of the new LUN clone that was created with $vmName3\n"
set myClonedLUN [findClonedLUN $vmName3 1]

###===> verify clone
send_user "\n## [incr testStep 1]. Starting the cloned VM: $vmName3\n"
send "start VM name=$vmName3\r"
validateCommandOutput "start vm command"


###===> clone vm -- simple
send_user "\n## [incr testStep 1]. Cloning $vmName2 to a new VM: $vmName4\n"
send "clone vm name=$vmName2 destType=Vm destName=$vmName4 serverPool=$serverPoolName\r"
validateCommandOutput "clone vm command"

send_user "\nWaiting 90 seconds for Servers to settle....\n"
sleep 90

###===> verify clone
send_user "\n## [incr testStep 1]. Starting the cloned VM: $vmName4\n"
send "start VM name=$vmName4\r"
validateCommandOutput "start vm command"
set testStatus(VPFC-208,status) "Passed"


send_user "Successfully completed Access Group and VM creation tests!\nContinuing.\n"
finishRun 0


