#!/usr/bin/expect

##
##    The Oracle Storage HCL Testkit is a suite of tests for certifying
##    storage with Oracle VM (OVM).
##    Copyright (C) 2013 Oracle USA, Inc 
##
##    This file is part of the Oracle Storage HCL Testkit.
##
##    The Oracle Storage HCL Testkit is free software; you can redistribute 
##    it and/or modify it under the terms of the GNU General Public License 
##    as published by the Free Software Foundation; either version 2 of the 
##    License, or (at your option) any later version.
##
##    The Oracle Storage HCL Testkit is distributed in the hope that it will
##    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
##    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with the Oracle Storage HCL Testkit.  If not; write to the 
##    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
##    Boston, MA 02110-1301 USA. Or see <http://www.gnu.org/licenses/>.
##

source commonExpectDef.cli

################ global variables #####################
set prompt "OVM> "
set VERBOSE [lindex $argv 2]
set send_human {.1 .3 1 .05 2}

set successMsg "Status: Success"
set failureMsg "Status: Failure"
set timeout 900

set myRepo ""
set myPoolFS ""
set repoDiskName ""
set poolfsDiskName ""

#######################################################

set testList {GNFS-100 GNFS-101 GNFS-102 GNFS-103 GNFS-104 GNFS-105 GNFS-106}
array set testStatus {}
set testStatus(GNFS-100,status) "Not Run"
set testStatus(GNFS-101,status) "Not Run"
set testStatus(GNFS-102,status) "Not Run"
set testStatus(GNFS-103,status) "Manual Testcase"
set testStatus(GNFS-104,status) "Not Run"
set testStatus(GNFS-105,status) "Not Run"
set testStatus(GNFS-106,status) "Manual Testcase"


########## externally defined variables ############
set ovmUser ${ovmUser}
set adminServer ${adminServer}
set ovmPassword [lindex $argv 0]
set ovmAgentUsername ${ovmAgentUsername}
set ovmAgentPassword [lindex $argv 1]
set ovmServerMasterIP ${ovmServerMasterIP}
set ovmServerSlaveIP ${ovmServerSlaveIP}

## Pool Parameters
set serverPoolName nfs_testpool2.1
set serverPoolName2 nfs_testpool2.2
set serverPoolIP ${serverPoolIP}

## Repository Parameters
set repoName1 repo_nfs2.1
set repoName2 repo_nfs2.2
set repoName3 repo_nfs2.3
set vdiskName vdisk1

## VM Parameters
set vmName1 VM_nfs2.1 
set vmName2 VM_nfs2.2

## Install Media
set virtualCDROM_URL ${virtualCDROM_URL}
set virtualCDROM_name [getFileName $virtualCDROM_URL]
set vmTemplateURL ${vmTemplateURL}
set vmTemplateName [getFileName $vmTemplateURL]
set vmAssemblyURL ${vmAssemblyURL}
set vmAssemblyName [getFileName $vmAssemblyURL]

## Network
set VM_Network ${VM_Network}
set VM_Netmask ${VM_Netmask}
set VM_NetworkPort ${VM_NetworkPort}
set ovmServerMaster_vmnetworkIP ${ovmServerMaster_vmnetworkIP} 
set ovmServerSlave_vmnetworkIP ${ovmServerSlave_vmnetworkIP} 
set vNIC1 00:21:f6:ca:fe:bf    
set vNIC2 00:21:f6:ca:fe:ba                         
set storageNetworkIP ${storageNetworkIP}
set storageNetworkPort ${storageNetworkPort}
set storageNetworkNetmask ${storageNetworkNetmask}
set ovmServerMaster_storageIP ${ovmServerMaster_storageIP}
set ovmServerSlave_storageIP ${ovmServerSlave_storageIP}

## Fileserver Parameters
set NFS_IPAddress ${NFS_IPAddress}
set NFS_ServerName ${NFS_ServerName}
set NFS_FilesystemName1 ${NFS_FilesystemName1}
set NFS_FilesystemName2 ${NFS_FilesystemName2}
set NFS_SharePath1 ${NFS_SharePath1}
set NFS_SharePath2 ${NFS_SharePath2}

## Cleanup
set serverPoolList {iscsi_testpool1 fc_testpool1 nfs_testpool2.1 nfs_testpool2.2 iscsi_testpool3 fc_testpool3}
set repoList {repo_fc1.1 repo_iscsi1.1 repo_nfs2.1 repo_nfs2.2 repo_nfs2.3 repo_fc3.1 repo_iscsi3.1}
set vmList {VM_fc1.1 VM_fc1.2 VM_iscsi1.1 VM_iscsi1.2 VM_fc3.1 VM_fc3.2 VM_iscsi3.1 VM_iscsi3.2 VM_nfs2.1 VM_nfs2.2}

## Logging
set hcllogdir ${hcllogdir}
set logfile $hcllogdir
append logfile "TestSuite3_NFS.log"
set testStep 0

#################################################################
##
##                   Test Suite 2: NFS
##
#################################################################

log_user 0
OVMlogin
log_file -a $logfile

send_user "\n-------------------------------------------------------------------\n"
send_user "GNFS-100: Discover OVM Servers"
send_user "\n-------------------------------------------------------------------\n"
set testStatus(GNFS-100,status) "Failed"

send_user "\n## [incr testStep 1]. Discover Master server\n"
send "discoverServer ipAddress=$ovmServerMasterIP port=8899 username=$ovmAgentUsername password=$ovmAgentPassword takeOwnership=yes\r"
validateCommandOutput "discoverServer command"

send_user "\n## [incr testStep 1]. Discover Secondary server\n"
send "discoverServer ipAddress=$ovmServerSlaveIP port=8899 username=$ovmAgentUsername password=$ovmAgentPassword takeOwnership=yes\r"
validateCommandOutput "discoverServer command"
set testStatus(GNFS-100,status) "Passed"


send_user "\nReading server info...\n"
set slist [getServerIDs]
array set myServerInfo [verifyServers $ovmServerMasterIP $ovmServerSlaveIP $storageNetworkPort $VM_NetworkPort $slist]

if {[info exists myServerInfo($ovmServerMasterIP,name)]} {
    set masterName $myServerInfo($ovmServerMasterIP,name)
} else {
    send_user "The server $ovmServerMasterIP cannot be found!\n"
    send_user "Exiting...\n"
    exit 2
}
if {[info exists myServerInfo($ovmServerSlaveIP,name)]} {
    set secondaryName $myServerInfo($ovmServerSlaveIP,name)
} else {
    send_user "The server $ovmServerSlaveIP cannot be found!\n"
    send_user "Exiting...\n"
    exit 2
}

if {[info exists myServerInfo($ovmServerMasterIP,vm_port)]} {
    set masterVMPort $myServerInfo($ovmServerMasterIP,vm_port)
} else {
    send_user "Could not find the VM Network Port $VM_NetworkPort on $masterName!\n"
    send_user "Exiting...\n"
    finishRun 4
}

if {[info exists myServerInfo($ovmServerSlaveIP,vm_port)]} {
    set secondaryVMPort $myServerInfo($ovmServerSlaveIP,vm_port)
} else {
    send_user "Could not find the VM Network Port $VM_NetworkPort on $secondaryName!\n"
    send_user "Exiting...\n"
    finishRun 4
}


set masterID $myServerInfo($ovmServerMasterIP,id)
set secondaryID $myServerInfo($ovmServerSlaveIP,id)

set masterPort $myServerInfo($ovmServerMasterIP,port)
set secondaryPort $myServerInfo($ovmServerSlaveIP,port)

set NFS_Plugin [find_SCSI_Plugins "False" "NFS"]

send_user "\nAttempting to create the Storage Network: $storageNetworkIP\n"
createNetwork $storageNetworkIP STORAGE

array set NetworkInfo {}
set NetworkInfo(master,name) $masterName
set NetworkInfo(master,id) $masterPort
set NetworkInfo(master,ip) $ovmServerMaster_storageIP
set NetworkInfo(slave,name) $secondaryName
set NetworkInfo(slave,id) $secondaryPort
set NetworkInfo(slave,ip) $ovmServerSlave_storageIP

send_user "\nAttempting to add ports to the Storage Network...\n"
addPorts $storageNetworkNetmask $storageNetworkIP [array get NetworkInfo]

send_user "\n-------------------------------------------------------------------\n"
send_user "GNFS-101: Register a generic NFS File Server"
send_user "\n-------------------------------------------------------------------\n"
set testStatus(GNFS-101,status) "Failed"

send_user "\n## [incr testStep 1]. Discovering NFS File Server: $NFS_ServerName\n"
send "create FileServer name=$NFS_ServerName plugin='$NFS_Plugin' accessHost=$NFS_IPAddress\r"
validateCommandOutput "create FileServer command"
set testStatus(GNFS-101,status) "Passed"

sleep 5

send_user "\n## [incr testStep 1]. Adding $masterName as an admin server to $NFS_ServerName\n"
send "add Server name=$masterName to FileServer name=$NFS_ServerName\r"
validateCommandOutput "add Server command"


send_user "\n## [incr testStep 1]. Adding $secondaryName as an admin server to $NFS_ServerName\n"
send "add Server name=$secondaryName to FileServer name=$NFS_ServerName\r"
validateCommandOutput "add Server command"

send_user "\n-------------------------------------------------------------------\n"
send_user "GNFS-102: Refresh NFS File Server after adding new exports"
send_user "\n-------------------------------------------------------------------\n"
set testStatus(GNFS-102,status) "Failed"

send_user "\n## [incr testStep 1]. Refreshing $NFS_ServerName\n"
send "refresh FileServer name=$NFS_ServerName\r"
validateCommandOutput "refresh FileServer command"

sleep 10

send_user "\n## [incr testStep 1]. Refreshing exported File System: $NFS_FilesystemName1\n"
send "refresh FileSystem name=$NFS_FilesystemName1\r"
validateCommandOutput "refresh Filesystem command"

sleep 10

send_user "\n## [incr testStep 1]. Refreshing exported File System: $NFS_FilesystemName2\n"
send "refresh FileSystem name=$NFS_FilesystemName2\r"
validateCommandOutput "refresh Filesystem command"
set testStatus(GNFS-102,status) "Passed"


sleep 5
send_user "\n-------------------------------------------------------------------\n"
send_user "GNFS-104: NFS repository operations in a clustered server pool"
send_user "\n-------------------------------------------------------------------\n"
set testStatus(GNFS-104,status) "Failed"

send_user "\n## [incr testStep 1]. Creating the Server Pool: $serverPoolName\n"
send "create serverpool virtualIP=$serverPoolIP clusterEnable=yes name=$serverPoolName filesystem=$NFS_FilesystemName1\r"
validateCommandOutput "create serverpool command"


send_user "\n## [incr testStep 1]. Adding $masterName to $serverPoolName\n"
send "add server name=$masterName to serverpool name=$serverPoolName\r"
validateCommandOutput "add server to serverlpool command"

send_user "\n## [incr testStep 1]. Adding  $secondaryName to $serverPoolName\n"
send "add server name=$secondaryName to serverpool name=$serverPoolName\r"
validateCommandOutput "add server to serverlpool command"


send_user "\n## [incr testStep 1]. Creating a Repository: $repoName1 on $NFS_FilesystemName2\n"
send "create repository name=$repoName1 fileSystem=$NFS_FilesystemName2\r"
validateCommandOutput "create repository command"


send_user "\n## [incr testStep 1]. Presenting $repoName1 to $masterName\n"
send "add server name=$masterName to Repository name=$repoName1\r"
validateCommandOutput "add server to repository command"

send_user "\n## [incr testStep 1]. Presenting $repoName1 to $secondaryName\n"
send "add server name=$secondaryName to Repository name=$repoName1\r"
validateCommandOutput "add server to repository command"


send_user "\n## [incr testStep 1]. Refreshing $repoName1\n" 
send "refresh Repository name=$repoName1\r"
validateCommandOutput "refresh repository command"

sleep 5
array unset NetworkInfo
array set NetworkInfo {}
set NetworkInfo(master,name) $masterName
set NetworkInfo(master,id) $masterVMPort
set NetworkInfo(master,ip) $ovmServerMaster_vmnetworkIP
set NetworkInfo(slave,name) $secondaryName
set NetworkInfo(slave,id) $secondaryVMPort
set NetworkInfo(slave,ip) $ovmServerSlave_vmnetworkIP

send_user "\n## [incr testStep 1]. Attempting to create the network $VM_Network for use with VMs\n"
createNetwork $VM_Network "VIRTUAL_MACHINE"

send_user "\nAttempting to add ports to the Storage Network...\n"
addPorts $VM_Netmask $VM_Network [array get NetworkInfo]

send_user "\n## [incr testStep 1]. Attempting to create vNIC: $vNIC1 on $VM_Network\n"
createVNIC $vNIC1 $VM_Network


send_user "\n## [incr testStep 1]. Attempting to create vNIC: $vNIC2 on $VM_Network\n"
createVNIC $vNIC2 $VM_Network


send_user "\n## [incr testStep 1]. Importing $vmTemplateName.  This will take several minutes...\n"
send "importTemplate repository name=$repoName1 server=$masterName url=$vmTemplateURL\r"
validateCommandOutput "import Template to $repoName1 command"

send_user "\n## [incr testStep 1]. Editing the values for memory and memoryLimit in $vmTemplateName\n"
send "edit VM name=$vmTemplateName memory=512 memoryLimit=512\r"
validateCommandOutput "edit $vmTemplateName command"


send_user "\n## [incr testStep 1]. Importing $virtualCDROM_name.  This will take several minutes...\n"
send "importVirtualCdrom repository name=$repoName1 server=$masterName url=$virtualCDROM_URL\r"
validateCommandOutput "import VirtualCdrom to $repoName1 command"


send_user "\n## [incr testStep 1]. Importing $vmAssemblyName.  This will take several minutes...\n"
send "importAssembly repository name=$repoName1 server=$masterName url=$vmAssemblyURL\r"
validateCommandOutput "import Assembly to $repoName1 command"


send_user "\n## [incr testStep 1]. Creating the VM: cloning $vmName1 from the template $vmTemplateName\n" 
send "clone VM name=$vmTemplateName destType=Vm destName=$vmName1 serverPool=$serverPoolName\r"
validateCommandOutput "clone VM from template command"


send_user "\n## [incr testStep 1]. Adding the vNIC $vNIC1 to $vmName1\n"
addVnic $vNIC1 $vmName1

send_user "\n## [incr testStep 1]. Starting $vmName1\n"
send "start VM name=$vmName1\r"
validateCommandOutput "start vm command"
set testStatus(GNFS-104,status) "Passed"


send_user "\n-------------------------------------------------------------------\n"
send_user "\nTearing down the environment before the beginning next test case.\n"
send_user "\n-------------------------------------------------------------------\n"


send_user "\n## [incr testStep 1]. Stopping and deleting VMs.\n\n"
set status [deleteVM $vmList]
switch -- $status \
    "False" {
	finishRun 2
    } "None" {
	send_verbose "\nNo VMs matching those created by the test scripts were found.\nContinuing.\n\n"
    } "True" {
	send_verbose "\nSuccessfully deleted all VMs.  Continuing.\n\n"
    } default {
	finishRun 2
    }

sleep 3

send_user "\n## [incr testStep 1]. Deleting the Repositories and all contents.\n"
set status [deleteRepo $repoList]
switch -- $status \
    "False" {
	finishRun 2
    } "None" {
	send_verbose "\nNo repositories matching those created by the test scripts were found.\nContinuing.\n\n"
    } "True" {
	send_verbose "\nSuccessfully deleted all Repositories.\nContinuing.\n\n"
    } default {
	finishRun 2
    }


sleep 3

send_user "\n\nDeleting the Server Pools...\n"
set status [deleteServerpool $serverPoolList]
switch -- $status \
    "False" {
	finishRun 2
    } "None" {
	send_verbose "\nNo Server Pools matching those created by the test scripts were found.\nContinuing.\n\n"
    } "True" {
	send_verbose "\nSuccessfully deleted all Server Pools.\nContinuing.\n\n"
    } default {
	finishRun 2
    }


send_user "\n\nVerifying the vNICs are still associated with the  $VM_Network network..."
send_user "\n## [incr testStep 1]. Adding $vNIC1 back to the $VM_Network\n"
send "edit Vnic name=$vNIC1 network=$VM_Network\r"
validateCommandOutput "edit Vnic command"

send_user "\n## [incr testStep 1]. Adding $vNIC2 back to the $VM_Network\n"
send "edit Vnic name=$vNIC2 network=$VM_Network\r"
validateCommandOutput "edit Vnic command"


send_user "\n-------------------------------------------------------------------\n"
send_user "GNFS-105: NFS Repository Operations on a Cluster Enabled Server Pool\n"
send_user "          Repositories reside on a Share Path."
send_user "\n-------------------------------------------------------------------\n"
set testStatus(GNFS-105,status) "Failed"


send_user "\n## [incr testStep 1]. Creating ServerPool: $serverPoolName2\n"
send "create serverpool virtualIP=$serverPoolIP clusterEnable=yes name=$serverPoolName2 filesystem=$NFS_FilesystemName2\r"
validateCommandOutput "create serverpool command"


send_user "\n## [incr testStep 1]. Adding $masterName to $serverPoolName2\n"
send "add server name=$masterName to serverpool name=$serverPoolName2\r"
validateCommandOutput "add server to serverlpool command"

send_user "\n## [incr testStep 1]. Adding $secondaryName to $serverPoolName2\n"
send "add server name=$secondaryName to serverpool name=$serverPoolName2\r"
validateCommandOutput "add server to serverlpool command"


send_user "\n## [incr testStep 1]. Creating a Repository: $repoName3 on $NFS_FilesystemName1"
send_user "$NFS_SharePath1"
send "create repository name=$repoName3 fileSystem=$NFS_FilesystemName1 sharePath=$NFS_SharePath1\r"
validateCommandOutput "create repository command"


send_user "\n## [incr testStep 1]. Presenting $repoName3 to $masterName\n"
send "add server name=$masterName to Repository name=$repoName3\r"
validateCommandOutput "add server to repository command"

send_user "\n## [incr testStep 1]. Presenting $repoName3 to $secondaryName\n"
send "add server name=$secondaryName to Repository name=$repoName3\r"
validateCommandOutput "add server to repository command"


send_user "\n## [incr testStep 1]. Refreshing $repoName3\n" 
send "refresh Repository name=$repoName3\r"
validateCommandOutput "refresh repository command"

sleep 5

send_user "\n## [incr testStep 1]. Creating a Repository: $repoName2 on $NFS_FilesystemName1"
send_user "$NFS_SharePath2\n"
send "create repository name=$repoName2 fileSystem=$NFS_FilesystemName1 sharePath=$NFS_SharePath2\r"
validateCommandOutput "create repository command"


send_user "\n## [incr testStep 1]. Presenting $repoName2 to $masterName\n"
send "add server name=$masterName to Repository name=$repoName2\r"
validateCommandOutput "add server to repository command"

send_user "\n## [incr testStep 1]. Presenting $repoName2 to $secondaryName\n"
send "add server name=$secondaryName to Repository name=$repoName2\r"
validateCommandOutput "add server to repository command"


send_user "\n## [incr testStep 1]. Refreshing $repoName2\n" 
send "refresh Repository name=$repoName2\r"
validateCommandOutput "refresh repository command"


send_user "\n## [incr testStep 1]. Importing $vmTemplateName to $repoName2.  This will take several minutes...\n"
send "importTemplate repository name=$repoName2 server=$masterName url=$vmTemplateURL\r"
validateCommandOutput "import Template to $repoName2 command"


send_user "\n## [incr testStep 1]. Editing the memory and memoryLimit values for $vmTemplateName\n"
send "edit VM name=$vmTemplateName memory=512 memoryLimit=512\r"
validateCommandOutput "edit $vmTemplateName command"


send_user "\n## [incr testStep 1]. Importing $virtualCDROM_name to $repoName3.  This will take several minutes...\n"
send "importVirtualCdrom repository name=$repoName3 server=$masterName url=$virtualCDROM_URL\r"
validateCommandOutput "import VirtualCdrom to $repoName3 command"


send_user "\n## [incr testStep 1]. Importing $vmAssemblyName to $repoName3.  This will take several minutes...\n"
send "importAssembly repository name=$repoName3 server=$masterName url=$vmAssemblyURL\r"
validateCommandOutput "import Assembly to $repoName3 command"


send_user "\n## [incr testStep 1]. Creating a virtual disk: $vdiskName on $repoName2\n"
send "create virtualDisk size=4 shareable=yes sparse=yes name=$vdiskName on repository name=$repoName2\r"
validateCommandOutput "create virtualDisk command"


send_user "\n## [incr testStep 1]. Creating the VM: cloning $vmName2 from the template $vmTemplateName\n" 
send "clone VM name=$vmTemplateName destType=Vm destName=$vmName2 serverPool=$serverPoolName2\r"
validateCommandOutput "clone VM from template command"


send_user "\n## [incr testStep 1]. Starting $vmName2\n"
send "start VM name=$vmName2\r"
validateCommandOutput "start vm command"
set testStatus(GNFS-105,status) "Passed"


send_user "\n\nTest Suite 2: NFS Certification with the Oracle Generic Plugin completed successfully.\n";
finishRun 0
