#!/usr/bin/python

##
##    The Oracle Storage HCL Testkit is a suite of tests for certifying
##    storage with Oracle VM (OVM).
##    Copyright (C) 2013 Oracle USA, Inc 
##
##    This file is part of the Oracle Storage HCL Testkit.
##
##    The Oracle Storage HCL Testkit is free software; you can redistribute 
##    it and/or modify it under the terms of the GNU General Public License 
##    as published by the Free Software Foundation; either version 2 of the 
##    License, or (at your option) any later version.
##
##    The Oracle Storage HCL Testkit is distributed in the hope that it will
##    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty 
##    of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with the Oracle Storage HCL Testkit.  If not; write to the 
##    Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
##    Boston, MA 02110-1301 USA. Or see <http://www.gnu.org/licenses/>.
##

####################################################################
###
###   This is the Oracle Storage HCL Toolkit for certifying storage 
###   connections over Fibre Channel, iSCSI, and NFS, for OVM 3.3 
###   utilizing the Oracle Generic SCSI plugin, or a vendor supplied
###   plugin.
###
###   Due to changes in the OVM 3.3 CLI, these tests will not 
###   succeed on older versions of OVM.
###
###   Please read the documentation which accompanies these
###   scripts for further information on the required system
###   configurations.
###  
#################################################################### 

import sys
import time
import re
import os
import optparse
import subprocess
import atexit
from modules import hclhelper

timestamp = time.strftime("%H%M%S-%m%d%Y", time.localtime())
mydate = time.strftime("%m%d%H%M", time.localtime())
logroot = '/tmp/OVM_HCL/'
logdir = logroot + timestamp + '/'
runLog = logdir + 'Certification_Results.log'


usage = "Usage: %prog [-hlv] -c CONFIGFILE -t TESTNAME\n\n"
parser = optparse.OptionParser(usage=usage)
parser.add_option("-c", 
                  "--config", 
                  action="store", 
                  dest="configFile", 
                  default="UNDEFINED", 
                  help="The full path to your config file.")
parser.add_option("-l", 
                  "--listTests", 
                  action="store_true", 
                  dest="listTests", 
                  default=False,
                  help="Use this option to get a listing of all the known tests.")
parser.add_option("-t", 
                  "--test", 
                  action="store", 
                  dest="testName", 
                  help="Specify the test to be run.  This will be the name of the test in the TDF directory.")
parser.add_option("-v", 
                  "--verbose", 
                  action="store_true", 
                  dest='verbose', 
                  default=False,
                  help="If you would like more output, please select this option.")



def finishRun(exitStatus, timelapse):

    hclhelper.packageLogs(logroot, logdir, timestamp)
    lapse = str(timelapse / 60)+"."+str(timelapse % 60)

    print hclhelper.Colors.HEADER+"--------------------------------------------------------------------------"
    print "                     Final Certification Status"
    print "--------------------------------------------------------------------------\n"+hclhelper.Colors.ENDC
    
    print "This is temporary!!  Add in Test Run details.  Probably need to pass in the TDF object.\n\n"
    sys.stdout.close()
    sys.exit(0)

#    print "Test Suite 1 - Storage Certification for FC and iSCSI protocols"
#    print testSuite1['fc'].ljust(27) + results[testSuite1['fc']].rjust(45)
#    print testSuite1['iscsi'].ljust(27) + results[testSuite1['iscsi']].rjust(45)
#
#    print "\nTest Suite 2 - Vendor Specific Plugin Testing for FC and iSCSI"
#    print testSuite2['fc'].ljust(27) + results[testSuite2['fc']].rjust(45)
#    print testSuite2['iscsi'].ljust(27) + results[testSuite2['iscsi']].rjust(45)
#
#    print "\nTest Suite 3 - Storage Certification for the NFS protocol"
#    print testSuite3['nfs'].ljust(27) + results[testSuite3['nfs']].rjust(45)
#
#    print "\nTest Suite 4 - Tearing down and cleaning up"
#    print testSuite4.ljust(27) + results[testSuite4].rjust(45)
#
#    print hclhelper.Colors.HEADER+"--------------------------------------------------------------------------"+hclhelper.Colors.ENDC
#    if exitStatus:
#        print "Overall Status:  ".ljust(27) + hclhelper.Colors.PASS+"PASSED".rjust(36)+hclhelper.Colors.ENDC
#        print "\nCertification tests completed after "+lapse+" minutes."
#        print "\nYour run results and logs have been packaged in the "
#        print logroot+"ovm-storage-hcl_"+timestamp+".tgz file"
#        print hclhelper.Colors.HEADER+"--------------------------------------------------------------------------\n"+hclhelper.Colors.ENDC
#        sys.stdout.close()
#        sys.exit(0)
#    else:
#        print "Overall Status:  ".ljust(27) + hclhelper.Colors.FAIL+"FAILED".rjust(36)+hclhelper.Colors.ENDC
#        print "\nCertification tests completed after "+lapse+" minutes."
#        print "\nYour run results and logs have been packaged in the "
#        print logroot+"ovm-storage-hcl_"+timestamp+".tgz file"
#        print hclhelper.Colors.HEADER+"--------------------------------------------------------------------------\n"+hclhelper.Colors.ENDC
#        sys.stdout.close()
#        sys.exit(2)


def main ():

    hclhelper.globalvars["PWD"] = os.path.dirname(os.path.realpath(__file__))
    (options, args) = parser.parse_args() 
    totallapse = 0
    status = False

    if options.listTests:
        hclhelper.getTestNames()
        sys.exit(hclhelper.globalvars["EXIT_SUCCESS"])

    if not options.testName:
        parser.error("A test name must be specified!\n")
    else:
        if not hclhelper.verifyTestName(options.testName):
            sys.exit(hclhelper.globalvars["EXIT_FAILURE"])


    try:
        os.makedirs(logdir)
    except OSError, e:
        print >>sys.stderr, "Execution failed:", e
        print "Unable to create logging directory: " + logdir
        print "Exiting...."
        sys.exit(hclhelper.globalvars["EXIT_FAILURE"])

    ## The tests will open their own logs, but the wrapper
    ## needs to write all output and results to the screen 
    ## and the runLog.
    logger = hclhelper.Logger(sys.stdout, runLog)
    sys.stdout = logger

    if options.verbose:
        hclhelper.globalvars["VERBOSE"] = True
        hclhelper.print_verbose("\nSetting VERBOSE=True")
    else:
        hclhelper.globalvars["VERBOSE"] = False
    
    hclhelper.globalvars["LOGDIR"] = logdir
    hclhelper.globalvars["DATETIME"] = mydate
    

    if options.configFile != "UNDEFINED":
        if hclhelper.verifyConfig(options.configFile, logdir):
            hclhelper.globalvars["CONFIGFILE"] = options.configFile
            print "A copy of "+options.configFile+" has been writen to "+logdir+".\n\n"
        else:
            sys.exit(hclhelper.globalvars["EXIT_FAILURE"])

    
    # Parse the TDF file, and set up the remainder of the 
    # test environment.  Then kick off the test and let it
    # run...

    try:
        myTestRun = hclhelper.TDF()
        myTestRun = hclhelper.parseTDF(options.testName)
        myDuration,myStatus = hclhelper.kickOff(myTestRun)
        finishRun(myStatus,myDuration)
            

    except (hclhelper.HCLERROR) as err:
        print >>sys.stderr, "Execution failed: "+err.value
        print "Exiting...."
        sys.exit(hclhelper.globalvars["EXIT_FAILURE"])


    

    

if __name__ == "__main__":
    try:
        starttime = time.time()
        main()
    except (KeyboardInterrupt):
        endtime = time.time()
        print "\n\nCaught user requested termination.  Exiting."
        finishRun(False, int(endtime - starttime))
    except (IOError,OSError) as err:
        endtime = time.time()
        print "\n\nCaught exception: "+err
        finishRun(False, int(endtime - starttime))
        
    


